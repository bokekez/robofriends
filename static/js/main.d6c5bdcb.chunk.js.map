{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","ErrorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","desc","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterRobotsName","filter","toLowerCase","includes","lenght","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAgBeA,EAdF,SAACC,GAAU,IACfC,EAAyBD,EAAzBC,KAAMC,EAAmBF,EAAnBE,MAAOC,EAAYH,EAAZG,KAAMC,EAAMJ,EAANI,GAC3B,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,mBACpB,6BACC,wBAAIC,UAAU,MAAMJ,GACpB,uBAAGI,UAAU,MAAMH,GACnB,uBAAGG,UAAU,MAAMF,MCKRK,EAZE,SAAC,GAAc,IAAZC,EAAW,EAAXA,OACbC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACvC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGT,GAAIK,EAAOI,GAAGT,GAAIH,KAAMQ,EAAOI,GAAGZ,KAAMC,MAAOO,EAAOI,GAAGX,WAE/E,OACA,6BACEQ,ICMYK,EAbG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aACjC,OACC,yBAAKZ,UAAU,UACf,2BACAA,UAAW,mCACXa,KAAK,SAASC,YAAY,gBAC1BC,SAAUH,MCEGI,EARA,SAACrB,GACf,OACC,yBAAKsB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEzB,EAAM0B,WCkBKC,G,wDApBd,WAAY3B,GAAO,IAAD,8BACjB,cAAMA,IACD4B,MAAQ,CACZC,UAAU,GAHM,E,8DAOAC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACP,yDAGDG,KAAKhC,MAAM0B,a,GAjBOQ,cCsGZC,E,kDA1Fd,aAAc,IAAD,8BACZ,gBAeDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAEjB,YAAaqB,EAAMC,OAAOC,SAf1C,EAAKX,MAAQ,CACZnB,OAAQ,GACRO,YAAa,IAJF,E,gEAOQ,IAAD,OACnBwB,MAAM,8CAA8CC,MAAK,SAAAC,GACxD,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKX,SAAS,CAACxB,OAAOmC,S,+BAOf,IAAD,OACDC,EAAmBb,KAAKJ,MAAMnB,OAAOqC,QAAO,SAAArC,GACjD,OAAIA,EAAOR,KAAK8C,cAAcC,SAAS,EAAKpB,MAAMZ,YAAY+B,eAEtDtC,EAAOR,KAGNQ,EAAOP,MAAM6C,cAAcC,SAAS,EAAKpB,MAAMZ,YAAY+B,eAE5DtC,EAAOP,MAqBP,MAOV,OAAiC,IAA7B8B,KAAKJ,MAAMnB,OAAOwC,OAGb,uCAGgB,KAArBJ,EAGF,yBAAKxC,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACC,wDAMH,yBAAK/B,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU3B,OAAQoC,W,GAjFLX,aCDEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,c","file":"static/js/main.d6c5bdcb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) =>{\r\n\tconst { name, email, desc, id} = props;\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robot' src={`https://robohash.org/${id}?size=200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2 className='f5'>{name}</h2>\r\n\t\t\t\t<p className='f6'>{email}</p>\r\n\t\t\t\t<p className='f6'>{desc}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots}) =>{\r\n\tconst cardComponent = robots.map((user, i) => {\r\n\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n\t})\r\n\treturn(\r\n\t<div>\r\n\t\t{cardComponent}\r\n    </div>\r\n\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className='tc pa2'>\r\n\t\t<input\r\n\t\tclassName ='pa3 ba b--green bg-lightest-blue'\r\n\t\ttype='search' placeholder='search robots' \r\n\t\tonChange={searchChange}\r\n\t\t/>\r\n\t\t</div>\r\n\t);\r\n\t\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll', border: '2px solid black', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({ hasError: true})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError){\r\n\t\t\treturn <h1>Ooooops. That is not good</h1>\r\n\t\t}\r\n\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component} from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\n// import {robots} from './robots';\r\nimport './App.css';\r\nimport ErrorBoundry from './ErrorBoundry';\r\n\r\n// const state ={\r\n// \trobots: robots,\r\n// \tsearchfield: ''\r\n// }\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.then(users => {\r\n\t\t\tthis.setState({robots:users})\r\n\t\t})\r\n\t\t// this.setState({ robots: robots});\r\n\t}\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value})\r\n\t}\r\n\trender(){\r\n\t\tconst filterRobotsName = this.state.robots.filter(robots => {\r\n\t\t\tif (robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase()))\r\n\t\t\t{\r\n\t\t\t\treturn robots.name;\r\n\t\t\t}\r\n\r\n\t\t\telse if (robots.email.toLowerCase().includes(this.state.searchfield.toLowerCase()))\r\n\t\t\t{\r\n\t\t\t\treturn robots.email;\r\n\t\t\t}\r\n\t\t\t\t\t\t// ispravno\r\n\t\t\t// else if (robots.desc.toLowerCase().includes(this.state.searchfield.toLowerCase()))\r\n\t\t\t// {\r\n\t\t\t// \treturn robots.desc;\r\n\t\t\t// }\r\n\r\n\t\t\t//neispravno\r\n\t\t\t// else { \r\n\t\t\t// \treturn robots; \r\n\t\t\t// }\r\n\t\t\t// else if(robots.id.toLowerCase().includes(this.state.searchfield.toLowerCase())){\r\n\t\t\t// \treturn robots.id;\r\n\t\t\t// }\r\n\t\t\t// else(robots.email.toLowerCase().includes(this.state.searchfield.toLowerCase()))\r\n \r\n\t\t\t\t// robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase()),\r\n\r\n\t\t\t\t// robots.email.toLowerCase().includes(this.state.searchfield.toLowerCase())\t\r\n\t\t\telse{\r\n\t\t\t\treturn '';\r\n\t\t\t}\r\n\t\t})\r\n\t\t\r\n\t\t// const filterRobots = this.state.robots.filter(robots => {\r\n\t\t// \treturn robots.email.toLowerCase().includes(this.state.searchfield.toLowerCase());\t\r\n\t\t// })\r\n\tif (this.state.robots.lenght === 0)\r\n\t\t{ \r\n\t\t\t// return <h1>Loading</h1>\r\n\t\t\treturn <h1>Loading</h1>\r\n\t\t}\r\n\telse {\r\n\tif (filterRobotsName === '')\r\n\t{\r\n\t\treturn(\r\n\t\t\t<div className='tc'>\t\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<p1>Search found no robots</p1>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}else {\t\t\r\n\treturn(\r\n\t\t<div className='tc'>\t\r\n\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t<CardList robots={filterRobotsName}/>\r\n\t\t\t\t</ErrorBoundry>\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n\t}\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n   \t<App/>\n  </React.StrictMode>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}